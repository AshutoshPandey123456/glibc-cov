        -:    0:Source:mallocExample.c
        -:    0:Graph:mallocExample.gcno
        -:    0:Data:mallocExample.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        5:    4:int main()
        -:    5:{
        -:    6:char cont;
        -:    7:
        -:    8:do {
        -:    9:
        -:   10:// This pointer will hold the  base address of the block created
        -:   11:int* ptr;
        -:   12:int n, i;
        -:   13:
        -:   14:// Get the number of elements for the array
        5:   15:printf("Enter number of elements:\n");
        5:   16:scanf("%d", &n);
        -:   17:
        -:   18:// Dynamically allocate memory using malloc()
        5:   19:ptr = (int*)malloc(n * sizeof(int));
        -:   20:
        -:   21:// Check if the memory has been successfully
        -:   22:// allocated by malloc or not
        5:   23:if (ptr == NULL) {
        2:   24:	printf("Memory not allocated.\n");
        -:   25:}
        -:   26:else {
        -:   27:
        -:   28:	// Memory has been successfully allocated
        3:   29:	printf("Memory successfully allocated using malloc.\n");
        -:   30:
        -:   31:	// Get the elements of the array
       21:   32:	for (i = 0; i < n; ++i) {
       18:   33:		ptr[i] = i + 1;
        -:   34:	}
        -:   35:
        -:   36:	// Print the elements of the array
        3:   37:	printf("The elements of the array are: \n ");
       21:   38:	for (i = 0; i < n; ++i) {
       18:   39:		printf("%d, ", ptr[i]);
        -:   40:	}
        -:   41:     }
        5:   42:fflush(stdin);
        5:   43:printf("\n continue? (y/n) \n");
        5:   44:scanf(" %c", &cont);
        -:   45:}
        5:   46:while(cont=='y');
        1:   47:	return 0;
        -:   48:}
